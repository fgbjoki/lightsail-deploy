name: Build Docker Image on Lightsail

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Restore NuGet packages
        run: dotnet restore ./src/Weather/Weather.sln

      - name: Build .NET application
        run: dotnet build ./src/Weather/Weather.sln --configuration Release --no-restore
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install doctl 
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build docker image
        id: build-image
        run: |
          docker build \
          -t $IMAGE_NAME:$(echo $GITHUB_SHA | head -c7) ./src/Weather -f ./src/Weather/Services/WebApi/Dockerfile

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $REGISTRY/$IMAGE_NAME:$(echo $GITHUB_SHA | head -c7)

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Upgrade AWS CLI version and setup lightsailctl
  #       run: |
  #         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #         unzip awscliv2.zip
  #         sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
  #         which aws
  #         aws --version
  #         sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
  #         sudo chmod +x /usr/local/bin/lightsailctl

  #     - name: Install jq
  #       run: sudo apt-get install jq

  #     - name: Create new Lightsail deployment
  #       id: create-deployment
  #       run: |
  #         IMAGE_TAG=$(aws lightsail get-container-images --service my-api --region eu-central-1 | jq -r .containerImages[0].image)
  #         echo "Deploying $IMAGE_TAG image..."
  #         aws lightsail create-container-service-deployment --service-name my-api \
  #          --containers "{
  #             \"inhousechef-backend\": {
  #               \"image\": \"$IMAGE_TAG\",
  #               \"environment\": {
  #               },
  #               \"ports\": {
  #                 \"8080\": \"HTTP\",
  #                 \"10000\": \"HTTP\"
  #               }
  #             }
  #           }" \
  #         --public-endpoint file://Lightsail/public-endpoint.json
  #       env:
  #         AWS_REGION: eu-central-1
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #     - name: Check deployment status
  #       run: |
  #         for i in {1..100}; do
  #           DEPLOYMENT_STATUS=$(aws lightsail get-container-service-deployments --service-name my-api --region eu-central-1 --query 'deployments[0].state' --output text)
  #           if [ "$DEPLOYMENT_STATUS" = "ACTIVE" ]; then
  #             echo "Deployment succeeded"
  #             exit 0
  #           elif [ "$DEPLOYMENT_STATUS" = "FAILED" ]; then
  #             echo "Deployment failed"
  #             exit 1
  #           else
  #             echo "Deployment status: $DEPLOYMENT_STATUS"
  #             sleep 10
  #           fi
  #         done
  #         echo "Deployment timed out"
  #         exit 1
  #       env:
  #         AWS_REGION: eu-central-1
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
